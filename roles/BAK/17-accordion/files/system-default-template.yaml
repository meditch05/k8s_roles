apiVersion: v1
items:
- apiVersion: v1
  data:
    buildable: "true"
    image: 127.0.0.1:30001/tomcat7:jre7
    kind: Deployment
    limit.cpu: "0"
    limit.gpu: "0"
    limit.mem: 0Mi
    logo: 
    modify.type: admin
    name: tomcat-7-0-jre7
    project: all
    request.cpu: "0"
    request.gpu: "0"
    request.mem: 0Mi
    routable: "true"
    scalable: "true"
    script: tomcat
    type: app
    yaml: "apiVersion: v1\rkind: List\ritems:\r- apiVersion: apps/v1beta1\r  kind:
      Deployment\r  metadata:\r    ### application and namespace name\r    name: {{
      appName }}\r    namespace: {{ projectName }}\r    ### labels\r    labels:\r
      \   {%- for label in labels %}\r      {{ label.key }}: {{ label.value }}\r    {%-
      endfor %}\r  spec:\r    ### replicas\r    replicas: {{ replicas }}\r    selector:\r
      \     matchLabels:\r        task: {{ appName }}\r    strategy:\r      type:
      {{ updateStrategy }}\r    minReadySeconds: 10\r    template:\r      metadata:\r
      \       labels:\r          task: {{ appName }}\r      spec:\r        ### node
      selector\r        nodeSelector:\r        {%- for selector in nodeSelectors %}\r
      \         {{ selector.key }}: {{ selector.value }}\r        {%- endfor %}\r
      \       imagePullSecrets:\r          - name: regsecret\r        containers:\r
      \       ##### war #####\r        {%- if sourceType != 'storage' %}\r        -
      name: war\r          image: {{ imageName }}\r          imagePullPolicy: {{ imagePullPolicy
      }}\r          resources:\r            requests:\r              cpu: {{ warRequestCPU
      }}\r              memory: {{ warRequestMEM }}\r            limits:\r              cpu:
      {{ warLimitCPU }}\r              memory: {{warLimitMEM }}\r          volumeMounts:\r
      \         - name: app-volume\r            mountPath: /deploy\r          - name:
      lib-volume\r            mountPath: /lib\r          - name: conf-volume\r            mountPath:
      /config\r        {%- endif %}\r        ##### fluentd #####\r        - name:
      fluentd\r          image: gcr.io/google-containers/fluentd-elasticsearch:v2.4.0\r
      \         imagePullPolicy: IfNotPresent\r          resources:\r            requests:\r
      \             cpu: {{ fluentdRequestCPU }}\r              memory: {{ fluentdRequestMEM
      }}\r            limits:\r              cpu: {{ fluentdLimitCPU }}\r              memory:
      {{ fluentdLimitMEM }}\r          env:\r          - name: POD_NAMESPACE\r            valueFrom:\r
      \             fieldRef:\r                fieldPath: metadata.namespace\r          volumeMounts:\r
      \         - name: logs-volume\r            mountPath: /var/log/tomcat\r          -
      name: fluentd-volume\r            mountPath: /etc/fluent\r          - name:
      fluentd-template\r            mountPath: /template\r          - name: timezone\r
      \           mountPath: /etc/localtime\r        ##### was #####\r        - name:
      tomcat\r          image: {{ wasImageName }}\r          imagePullPolicy: Always\r
      \         ### command and args\r          command: [{%- for command in commands
      %}\"{{ command }}\"{{ \",\" if not loop.last }}{%- endfor %}]\r          args:
      [{%- for argument in arguments %}\"{{ argument }}\"{{ \",\" if not loop.last
      }}{%- endfor %}]\r          ### resource quota\r          resources:\r            requests:\r
      \             cpu: {{ requestCPU }}\r              memory: {{ requestMEM }}\r
      \           limits:\r              cpu: {{ limitCPU }}\r              memory:
      {{ limitMEM }}\r          lifecycle:\r            preStop:\r              exec:\r
      \               command: [\"/usr/local/tomcat/bin/shutdown.sh\"]\r          ###
      ports\r          ports:\r          {%- if containerPorts|length == 0 %}\r          -
      name: http-port\r            containerPort: 8080\r            protocol: TCP\r
      \         {%- endif %}\r          {%- for port in containerPorts %}\r          -
      name : {{ port.name }}\r            containerPort: {{ port.targetPort }}\r            protocol:
      {{ port.protocol }}\r          {%- endfor %}\r          ### environment variables\r
      \         env:\r          - name: SCOUTER_OPTS\r            valueFrom:\r              configMapKeyRef:\r
      \               name: scouter-tomcat-config\r                key: scouter.opts\r
      \         - name: TOMCAT_OPTS\r            valueFrom:\r              configMapKeyRef:\r
      \               name: tomcat-config\r                key: java.opts\r          -
      name: POD_NAME\r            valueFrom:\r              fieldRef:\r                fieldPath:
      metadata.name\r          {%- if environments|length == 0 %}\r          - name:
      LOGTYPE\r            value: file\r          - name: SCOUTER_HOST\r            value:
      -Dnet_collector_ip=monitor-agent.{{ projectName }}\r          - name: HEAP_MEM\r
      \           value: -Xms512m -Xmx512m\r          - name: JAVA_OPTS\r            value:
      $(TOMCAT_OPTS) $(HEAP_MEM) $(SCOUTER_HOST) $(SCOUTER_OPTS)\r          {%- endif
      %}\r          {%- for env in environments %}\r          - name: {{ env.name
      }}\r            value: {{ env.value }}\r          {%- endfor %}\r          ###
      liveness probe\r          {%- if livenessType != 'NoneType' %}\r          livenessProbe:\r
      \           {%- if livenessType == 'ExecType' %}\r            exec:\r              command:\r
      \             {%- for command in livenessExecCommand %}\r              - {{
      command }}\r              {%- endfor %}\r            {%- elif livenessType ==
      'httpGetType' %}\r            httpGet:\r              scheme: {{ livenessHttpGetScheme
      }}\r              port: {{ livenessHttpGetPort }}\r              path: {{ livenessHttpGetPath
      }}\r              httpHeaders:\r              {%- for header in livenessHttpGetHeaders
      %}\r              - name: {{ header.name }}\r                value: {{ header.value
      }}\r              {%- endfor %}\r            {%- elif livenessType == 'tcpSocketType'
      %}\r            tcpSocket:\r              port: {{ livenessTcpSocketPort }}\r
      \           {%- endif %}\r            initialDelaySeconds: {{ livenessInitialDelaySeconds
      }}\r            timeoutSeconds : {{ livenessTimeoutSeconds }}\r            periodSeconds:
      {{ livenessPeriodSeconds }}\r            successThreshold : {{ livenessSuccessThreshold
      }}\r            failureThreshold : {{ livenessFailureThreshold }}\r          {%-
      endif %}\r          ### readness probe\r          {%- if readinessType != 'NoneType'
      %}\r          readinessProbe:\r            {%- if readinessType == 'ExecType'
      %}\r            exec:\r              command:\r              {%- for command
      in readinessExecCommand %}\r              - {{ command }}\r              {%-
      endfor %}\r            {%- elif readinessType == 'httpGetType' %}\r            httpGet:\r
      \             scheme: {{ readinessHttpGetScheme }}\r              port: {{ readinessHttpGetPort
      }}\r              path: {{ readinessHttpGetPath }}\r              httpHeaders:\r
      \             {%- for header in readinessHttpGetHeaders %}\r              -
      name: {{ header.name }}\r                value: {{ header.value }}\r              {%-
      endfor %}\r            {%- elif readinessType == 'tcpSocketType' %}\r            tcpSocket:\r
      \             port: {{ readinessTcpSocketPort }}\r            {%- endif %}\r
      \           initialDelaySeconds: {{ readinessInitialDelaySeconds }}\r            timeoutSeconds
      : {{ readinessTimeoutSeconds }}\r            periodSeconds: {{ readinessPeriodSeconds
      }}\r            successThreshold : {{ readinessSuccessThreshold }}\r            failureThreshold
      : {{ readinessFailureThreshold }}\r          {%- endif %}\r          ### volume
      mounts\r          volumeMounts:\r          - name: app-volume\r            mountPath:
      /usr/local/tomcat/webapps\r          - name: conf-volume\r            mountPath:
      /usr/local/tomcat/tmp\r          - name: lib-volume\r            mountPath:
      /usr/local/tomcat/lib/jdbc\r          - name: logs-volume\r            mountPath:
      /usr/local/tomcat/logs\r          - name: work-volume\r            mountPath:
      /usr/local/tomcat/work\r          - name: timezone\r            mountPath: /etc/localtime\r
      \         {%- for volume in volumes %}\r          - name: {{ volume.name }}\r
      \           mountPath: {{ volume.mount }}\r          {%- endfor %}\r          {%-
      for userDefVar in userDefVars %}\r          - name: {{ userDefVar.vol }}\r            mountPath:
      {{ userDefVar.mount }}\r            {%- if userDefVar.key != '' %}\r            subPath:
      {{ userDefVar.key }}\r            {%- endif %}\r          {%- endfor %}\r        ###
      volumes\r        volumes:\r      {%- if sourceType == 'storage' %}\r        -
      name: app-volume\r          hostPath:\r            path: {{ storageSource }}\r
      \           type: Directory\r        - name: conf-volume\r          {%- if storageConfig
      != '' %}\r          hostPath:\r            path: {{ storageConfig }}\r            type:
      Directory\r          {%- endif %}\r        - name: lib-volume\r          {%-
      if storageLib != '' %}\r          hostPath:\r            path: {{ storageLib
      }}\r            type: Directory\r          {%- endif %}\r      {%- else %}\r
      \       - name: app-volume\r        {%- if appVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ appVolume.name }}\r        {%- endif %}\r        -
      name: conf-volume\r        {%- if confVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ confVolume.name }}\r        {%- endif %}\r        -
      name: lib-volume\r        {%- if libVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ libVolume.name }}\r        {%- endif %}\r      {%-
      endif %}\r        - name: logs-volume\r        {%- if logsVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ logsVolume.name }}\r        {%- endif %}\r        -
      name: work-volume\r        {%- if workVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ workVolume.name }}\r        {%- endif %}\r        {%-
      for volume in volumes %}\r        - name: {{ volume.name }}\r          persistentVolumeClaim:\r
      \           claimName: {{ volume.name }}\r        {%- endfor %}\r        {%-
      for userDefVar in userDefVars %}\r        - name: {{ userDefVar.vol }}\r          configMap:\r
      \           name: {{ userDefVar.name }}\r        {%- endfor %}\r        - name:
      timezone\r          hostPath:\r            path: /etc/localtime\r        - name:
      fluentd-volume\r          configMap:\r            name: tomcat-fluentd\r        -
      name: fluentd-template\r          configMap:\r            name: accesslog-template"
  kind: ConfigMap
  metadata:
    creationTimestamp: 2019-03-18T04:52:50Z
    labels:
      a7n/system: "true"
      a7n/task: template
    name: template-tomcat-7-0-jre7
    namespace: accordion
    resourceVersion: "550112"
    selfLink: /api/v1/namespaces/accordion/configmaps/template-tomcat-7-0-jre7
    uid: aeba9400-4939-11e9-9f92-005056b08841
- apiVersion: v1
  data:
    buildable: "true"
    image: 127.0.0.1:30001/tomcat8:jre7
    kind: Deployment
    limit.cpu: "0"
    limit.gpu: "0"
    limit.mem: 0Mi
    logo: 
    modify.type: admin
    name: tomcat-8-0-jre7
    project: all
    request.cpu: "0"
    request.gpu: "0"
    request.mem: 0Mi
    routable: "true"
    scalable: "true"
    script: tomcat
    type: app
    yaml: "apiVersion: v1\rkind: List\ritems:\r- apiVersion: apps/v1beta1\r  kind:
      Deployment\r  metadata:\r    ### application and namespace name\r    name: {{
      appName }}\r    namespace: {{ projectName }}\r    ### labels\r    labels:\r
      \   {%- for label in labels %}\r      {{ label.key }}: {{ label.value }}\r    {%-
      endfor %}\r  spec:\r    ### replicas\r    replicas: {{ replicas }}\r    selector:\r
      \     matchLabels:\r        task: {{ appName }}\r    strategy:\r      type:
      {{ updateStrategy }}\r    minReadySeconds: 10\r    template:\r      metadata:\r
      \       labels:\r          task: {{ appName }}\r      spec:\r        ### node
      selector\r        nodeSelector:\r        {%- for selector in nodeSelectors %}\r
      \         {{ selector.key }}: {{ selector.value }}\r        {%- endfor %}\r
      \       imagePullSecrets:\r          - name: regsecret\r        containers:\r
      \       ##### war #####\r        {%- if sourceType != 'storage' %}\r        -
      name: war\r          image: {{ imageName }}\r          imagePullPolicy: {{ imagePullPolicy
      }}\r          resources:\r            requests:\r              cpu: {{ warRequestCPU
      }}\r              memory: {{ warRequestMEM }}\r            limits:\r              cpu:
      {{ warLimitCPU }}\r              memory: {{warLimitMEM }}\r          volumeMounts:\r
      \         - name: app-volume\r            mountPath: /deploy\r          - name:
      lib-volume\r            mountPath: /lib\r          - name: conf-volume\r            mountPath:
      /config\r        {%- endif %}\r        ##### fluentd #####\r        - name:
      fluentd\r          image: gcr.io/google-containers/fluentd-elasticsearch:v2.4.0\r
      \         imagePullPolicy: IfNotPresent\r          resources:\r            requests:\r
      \             cpu: {{ fluentdRequestCPU }}\r              memory: {{ fluentdRequestMEM
      }}\r            limits:\r              cpu: {{ fluentdLimitCPU }}\r              memory:
      {{ fluentdLimitMEM }}\r          env:\r          - name: POD_NAMESPACE\r            valueFrom:\r
      \             fieldRef:\r                fieldPath: metadata.namespace\r          volumeMounts:\r
      \         - name: logs-volume\r            mountPath: /var/log/tomcat\r          -
      name: fluentd-volume\r            mountPath: /etc/fluent\r          - name:
      fluentd-template\r            mountPath: /template\r          - name: timezone\r
      \           mountPath: /etc/localtime\r        ##### was #####\r        - name:
      tomcat\r          image: {{ wasImageName }}\r          imagePullPolicy: Always\r
      \         ### command and args\r          command: [{%- for command in commands
      %}\"{{ command }}\"{{ \",\" if not loop.last }}{%- endfor %}]\r          args:
      [{%- for argument in arguments %}\"{{ argument }}\"{{ \",\" if not loop.last
      }}{%- endfor %}]\r          ### resource quota\r          resources:\r            requests:\r
      \             cpu: {{ requestCPU }}\r              memory: {{ requestMEM }}\r
      \           limits:\r              cpu: {{ limitCPU }}\r              memory:
      {{ limitMEM }}\r          lifecycle:\r            preStop:\r              exec:\r
      \               command: [\"/usr/local/tomcat/bin/shutdown.sh\"]\r          ###
      ports\r          ports:\r          {%- if containerPorts|length == 0 %}\r          -
      name: http-port\r            containerPort: 8080\r            protocol: TCP\r
      \         {%- endif %}\r          {%- for port in containerPorts %}\r          -
      name : {{ port.name }}\r            containerPort: {{ port.targetPort }}\r            protocol:
      {{ port.protocol }}\r          {%- endfor %}\r          ### environment variables\r
      \         env:\r          - name: SCOUTER_OPTS\r            valueFrom:\r              configMapKeyRef:\r
      \               name: scouter-tomcat-config\r                key: scouter.opts\r
      \         - name: TOMCAT_OPTS\r            valueFrom:\r              configMapKeyRef:\r
      \               name: tomcat-config\r                key: java.opts\r          -
      name: POD_NAME\r            valueFrom:\r              fieldRef:\r                fieldPath:
      metadata.name\r          {%- if environments|length == 0 %}\r          - name:
      LOGTYPE\r            value: file\r          - name: SCOUTER_HOST\r            value:
      -Dnet_collector_ip=monitor-agent.{{ projectName }}\r          - name: HEAP_MEM\r
      \           value: -Xms512m -Xmx512m\r          - name: JAVA_OPTS\r            value:
      $(TOMCAT_OPTS) $(HEAP_MEM) $(SCOUTER_HOST) $(SCOUTER_OPTS)\r          {%- endif
      %}\r          {%- for env in environments %}\r          - name: {{ env.name
      }}\r            value: {{ env.value }}\r          {%- endfor %}\r          ###
      liveness probe\r          {%- if livenessType != 'NoneType' %}\r          livenessProbe:\r
      \           {%- if livenessType == 'ExecType' %}\r            exec:\r              command:\r
      \             {%- for command in livenessExecCommand %}\r              - {{
      command }}\r              {%- endfor %}\r            {%- elif livenessType ==
      'httpGetType' %}\r            httpGet:\r              scheme: {{ livenessHttpGetScheme
      }}\r              port: {{ livenessHttpGetPort }}\r              path: {{ livenessHttpGetPath
      }}\r              httpHeaders:\r              {%- for header in livenessHttpGetHeaders
      %}\r              - name: {{ header.name }}\r                value: {{ header.value
      }}\r              {%- endfor %}\r            {%- elif livenessType == 'tcpSocketType'
      %}\r            tcpSocket:\r              port: {{ livenessTcpSocketPort }}\r
      \           {%- endif %}\r            initialDelaySeconds: {{ livenessInitialDelaySeconds
      }}\r            timeoutSeconds : {{ livenessTimeoutSeconds }}\r            periodSeconds:
      {{ livenessPeriodSeconds }}\r            successThreshold : {{ livenessSuccessThreshold
      }}\r            failureThreshold : {{ livenessFailureThreshold }}\r          {%-
      endif %}\r          ### readness probe\r          {%- if readinessType != 'NoneType'
      %}\r          readinessProbe:\r            {%- if readinessType == 'ExecType'
      %}\r            exec:\r              command:\r              {%- for command
      in readinessExecCommand %}\r              - {{ command }}\r              {%-
      endfor %}\r            {%- elif readinessType == 'httpGetType' %}\r            httpGet:\r
      \             scheme: {{ readinessHttpGetScheme }}\r              port: {{ readinessHttpGetPort
      }}\r              path: {{ readinessHttpGetPath }}\r              httpHeaders:\r
      \             {%- for header in readinessHttpGetHeaders %}\r              -
      name: {{ header.name }}\r                value: {{ header.value }}\r              {%-
      endfor %}\r            {%- elif readinessType == 'tcpSocketType' %}\r            tcpSocket:\r
      \             port: {{ readinessTcpSocketPort }}\r            {%- endif %}\r
      \           initialDelaySeconds: {{ readinessInitialDelaySeconds }}\r            timeoutSeconds
      : {{ readinessTimeoutSeconds }}\r            periodSeconds: {{ readinessPeriodSeconds
      }}\r            successThreshold : {{ readinessSuccessThreshold }}\r            failureThreshold
      : {{ readinessFailureThreshold }}\r          {%- endif %}\r          ### volume
      mounts\r          volumeMounts:\r          - name: app-volume\r            mountPath:
      /usr/local/tomcat/webapps\r          - name: conf-volume\r            mountPath:
      /usr/local/tomcat/tmp\r          - name: lib-volume\r            mountPath:
      /usr/local/tomcat/lib/jdbc\r          - name: logs-volume\r            mountPath:
      /usr/local/tomcat/logs\r          - name: work-volume\r            mountPath:
      /usr/local/tomcat/work\r          - name: timezone\r            mountPath: /etc/localtime\r
      \         {%- for volume in volumes %}\r          - name: {{ volume.name }}\r
      \           mountPath: {{ volume.mount }}\r          {%- endfor %}\r          {%-
      for userDefVar in userDefVars %}\r          - name: {{ userDefVar.vol }}\r            mountPath:
      {{ userDefVar.mount }}\r            {%- if userDefVar.key != '' %}\r            subPath:
      {{ userDefVar.key }}\r            {%- endif %}\r          {%- endfor %}\r        ###
      volumes\r        volumes:\r      {%- if sourceType == 'storage' %}\r        -
      name: app-volume\r          hostPath:\r            path: {{ storageSource }}\r
      \           type: Directory\r        - name: conf-volume\r          {%- if storageConfig
      != '' %}\r          hostPath:\r            path: {{ storageConfig }}\r            type:
      Directory\r          {%- endif %}\r        - name: lib-volume\r          {%-
      if storageLib != '' %}\r          hostPath:\r            path: {{ storageLib
      }}\r            type: Directory\r          {%- endif %}\r      {%- else %}\r
      \       - name: app-volume\r        {%- if appVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ appVolume.name }}\r        {%- endif %}\r        -
      name: conf-volume\r        {%- if confVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ confVolume.name }}\r        {%- endif %}\r        -
      name: lib-volume\r        {%- if libVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ libVolume.name }}\r        {%- endif %}\r      {%-
      endif %}\r        - name: logs-volume\r        {%- if logsVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ logsVolume.name }}\r        {%- endif %}\r        -
      name: work-volume\r        {%- if workVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ workVolume.name }}\r        {%- endif %}\r        {%-
      for volume in volumes %}\r        - name: {{ volume.name }}\r          persistentVolumeClaim:\r
      \           claimName: {{ volume.name }}\r        {%- endfor %}\r        {%-
      for userDefVar in userDefVars %}\r        - name: {{ userDefVar.vol }}\r          configMap:\r
      \           name: {{ userDefVar.name }}\r        {%- endfor %}\r        - name:
      timezone\r          hostPath:\r            path: /etc/localtime\r        - name:
      fluentd-volume\r          configMap:\r            name: tomcat-fluentd\r        -
      name: fluentd-template\r          configMap:\r            name: accesslog-template"
  kind: ConfigMap
  metadata:
    creationTimestamp: 2019-03-18T04:52:50Z
    labels:
      a7n/system: "true"
      a7n/task: template
    name: template-tomcat-8-0-jre7
    namespace: accordion
    resourceVersion: "550113"
    selfLink: /api/v1/namespaces/accordion/configmaps/template-tomcat-8-0-jre7
    uid: aec50456-4939-11e9-9f92-005056b08841
- apiVersion: v1
  data:
    buildable: "true"
    image: 127.0.0.1:30001/tomcat8:jre8
    kind: Deployment
    limit.cpu: "0"
    limit.gpu: "0"
    limit.mem: 0Mi
    logo: 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
    modify.type: admin
    name: tomcat-8-0-jre8
    project: all
    request.cpu: "0"
    request.gpu: "0"
    request.mem: 0Mi
    routable: "true"
    scalable: "true"
    script: tomcat
    type: app
    yaml: "apiVersion: v1\rkind: List\ritems:\r- apiVersion: apps/v1beta1\r  kind:
      Deployment\r  metadata:\r    ### application and namespace name\r    name: {{
      appName }}\r    namespace: {{ projectName }}\r    ### labels\r    labels:\r
      \   {%- for label in labels %}\r      {{ label.key }}: {{ label.value }}\r    {%-
      endfor %}\r  spec:\r    ### replicas\r    replicas: {{ replicas }}\r    selector:\r
      \     matchLabels:\r        task: {{ appName }}\r    strategy:\r      type:
      {{ updateStrategy }}\r    minReadySeconds: 10\r    template:\r      metadata:\r
      \       labels:\r          task: {{ appName }}\r      spec:\r        ### node
      selector\r        nodeSelector:\r        {%- for selector in nodeSelectors %}\r
      \         {{ selector.key }}: {{ selector.value }}\r        {%- endfor %}\r
      \       imagePullSecrets:\r          - name: regsecret\r        containers:\r
      \       ##### war #####\r        {%- if sourceType != 'storage' %}\r        -
      name: war\r          image: {{ imageName }}\r          imagePullPolicy: {{ imagePullPolicy
      }}\r          resources:\r            requests:\r              cpu: {{ warRequestCPU
      }}\r              memory: {{ warRequestMEM }}\r            limits:\r              cpu:
      {{ warLimitCPU }}\r              memory: {{warLimitMEM }}\r          volumeMounts:\r
      \         - name: app-volume\r            mountPath: /deploy\r          - name:
      lib-volume\r            mountPath: /lib\r          - name: conf-volume\r            mountPath:
      /config\r        {%- endif %}\r        ##### fluentd #####\r        - name:
      fluentd\r          image: gcr.io/google-containers/fluentd-elasticsearch:v2.4.0\r
      \         imagePullPolicy: IfNotPresent\r          resources:\r            requests:\r
      \             cpu: {{ fluentdRequestCPU }}\r              memory: {{ fluentdRequestMEM
      }}\r            limits:\r              cpu: {{ fluentdLimitCPU }}\r              memory:
      {{ fluentdLimitMEM }}\r          env:\r          - name: POD_NAMESPACE\r            valueFrom:\r
      \             fieldRef:\r                fieldPath: metadata.namespace\r          volumeMounts:\r
      \         - name: logs-volume\r            mountPath: /var/log/tomcat\r          -
      name: fluentd-volume\r            mountPath: /etc/fluent\r          - name:
      fluentd-template\r            mountPath: /template\r          - name: timezone\r
      \           mountPath: /etc/localtime\r        ##### was #####\r        - name:
      tomcat\r          image: {{ wasImageName }}\r          imagePullPolicy: Always\r
      \         ### command and args\r          command: [{%- for command in commands
      %}\"{{ command }}\"{{ \",\" if not loop.last }}{%- endfor %}]\r          args:
      [{%- for argument in arguments %}\"{{ argument }}\"{{ \",\" if not loop.last
      }}{%- endfor %}]\r          ### resource quota\r          resources:\r            requests:\r
      \             cpu: {{ requestCPU }}\r              memory: {{ requestMEM }}\r
      \           limits:\r              cpu: {{ limitCPU }}\r              memory:
      {{ limitMEM }}\r          lifecycle:\r            preStop:\r              exec:\r
      \               command: [\"/usr/local/tomcat/bin/shutdown.sh\"]\r          ###
      ports\r          ports:\r          {%- if containerPorts|length == 0 %}\r          -
      name: http-port\r            containerPort: 8080\r            protocol: TCP\r
      \         {%- endif %}\r          {%- for port in containerPorts %}\r          -
      name : {{ port.name }}\r            containerPort: {{ port.targetPort }}\r            protocol:
      {{ port.protocol }}\r          {%- endfor %}\r          ### environment variables\r
      \         env:\r          - name: SCOUTER_OPTS\r            valueFrom:\r              configMapKeyRef:\r
      \               name: scouter-tomcat-config\r                key: scouter.opts\r
      \         - name: TOMCAT_OPTS\r            valueFrom:\r              configMapKeyRef:\r
      \               name: tomcat-config\r                key: java.opts\r          -
      name: POD_NAME\r            valueFrom:\r              fieldRef:\r                fieldPath:
      metadata.name\r          {%- if environments|length == 0 %}\r          - name:
      LOGTYPE\r            value: file\r          - name: SCOUTER_HOST\r            value:
      -Dnet_collector_ip=monitor-agent.{{ projectName }}\r          - name: HEAP_MEM\r
      \           value: -Xms512m -Xmx512m\r          - name: JAVA_OPTS\r            value:
      $(TOMCAT_OPTS) $(HEAP_MEM) $(SCOUTER_HOST) $(SCOUTER_OPTS)\r          {%- endif
      %}\r          {%- for env in environments %}\r          - name: {{ env.name
      }}\r            value: {{ env.value }}\r          {%- endfor %}\r          ###
      liveness probe\r          {%- if livenessType != 'NoneType' %}\r          livenessProbe:\r
      \           {%- if livenessType == 'ExecType' %}\r            exec:\r              command:\r
      \             {%- for command in livenessExecCommand %}\r              - {{
      command }}\r              {%- endfor %}\r            {%- elif livenessType ==
      'httpGetType' %}\r            httpGet:\r              scheme: {{ livenessHttpGetScheme
      }}\r              port: {{ livenessHttpGetPort }}\r              path: {{ livenessHttpGetPath
      }}\r              httpHeaders:\r              {%- for header in livenessHttpGetHeaders
      %}\r              - name: {{ header.name }}\r                value: {{ header.value
      }}\r              {%- endfor %}\r            {%- elif livenessType == 'tcpSocketType'
      %}\r            tcpSocket:\r              port: {{ livenessTcpSocketPort }}\r
      \           {%- endif %}\r            initialDelaySeconds: {{ livenessInitialDelaySeconds
      }}\r            timeoutSeconds : {{ livenessTimeoutSeconds }}\r            periodSeconds:
      {{ livenessPeriodSeconds }}\r            successThreshold : {{ livenessSuccessThreshold
      }}\r            failureThreshold : {{ livenessFailureThreshold }}\r          {%-
      endif %}\r          ### readness probe\r          {%- if readinessType != 'NoneType'
      %}\r          readinessProbe:\r            {%- if readinessType == 'ExecType'
      %}\r            exec:\r              command:\r              {%- for command
      in readinessExecCommand %}\r              - {{ command }}\r              {%-
      endfor %}\r            {%- elif readinessType == 'httpGetType' %}\r            httpGet:\r
      \             scheme: {{ readinessHttpGetScheme }}\r              port: {{ readinessHttpGetPort
      }}\r              path: {{ readinessHttpGetPath }}\r              httpHeaders:\r
      \             {%- for header in readinessHttpGetHeaders %}\r              -
      name: {{ header.name }}\r                value: {{ header.value }}\r              {%-
      endfor %}\r            {%- elif readinessType == 'tcpSocketType' %}\r            tcpSocket:\r
      \             port: {{ readinessTcpSocketPort }}\r            {%- endif %}\r
      \           initialDelaySeconds: {{ readinessInitialDelaySeconds }}\r            timeoutSeconds
      : {{ readinessTimeoutSeconds }}\r            periodSeconds: {{ readinessPeriodSeconds
      }}\r            successThreshold : {{ readinessSuccessThreshold }}\r            failureThreshold
      : {{ readinessFailureThreshold }}\r          {%- endif %}\r          ### volume
      mounts\r          volumeMounts:\r          - name: app-volume\r            mountPath:
      /usr/local/tomcat/webapps\r          - name: conf-volume\r            mountPath:
      /usr/local/tomcat/tmp\r          - name: lib-volume\r            mountPath:
      /usr/local/tomcat/lib/jdbc\r          - name: logs-volume\r            mountPath:
      /usr/local/tomcat/logs\r          - name: work-volume\r            mountPath:
      /usr/local/tomcat/work\r          - name: timezone\r            mountPath: /etc/localtime\r
      \         {%- for volume in volumes %}\r          - name: {{ volume.name }}\r
      \           mountPath: {{ volume.mount }}\r          {%- endfor %}\r          {%-
      for userDefVar in userDefVars %}\r          - name: {{ userDefVar.vol }}\r            mountPath:
      {{ userDefVar.mount }}\r            {%- if userDefVar.key != '' %}\r            subPath:
      {{ userDefVar.key }}\r            {%- endif %}\r          {%- endfor %}\r        ###
      volumes\r        volumes:\r      {%- if sourceType == 'storage' %}\r        -
      name: app-volume\r          hostPath:\r            path: {{ storageSource }}\r
      \           type: Directory\r        - name: conf-volume\r          {%- if storageConfig
      != '' %}\r          hostPath:\r            path: {{ storageConfig }}\r            type:
      Directory\r          {%- endif %}\r        - name: lib-volume\r          {%-
      if storageLib != '' %}\r          hostPath:\r            path: {{ storageLib
      }}\r            type: Directory\r          {%- endif %}\r      {%- else %}\r
      \       - name: app-volume\r        {%- if appVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ appVolume.name }}\r        {%- endif %}\r        -
      name: conf-volume\r        {%- if confVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ confVolume.name }}\r        {%- endif %}\r        -
      name: lib-volume\r        {%- if libVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ libVolume.name }}\r        {%- endif %}\r      {%-
      endif %}\r        - name: logs-volume\r        {%- if logsVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ logsVolume.name }}\r        {%- endif %}\r        -
      name: work-volume\r        {%- if workVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ workVolume.name }}\r        {%- endif %}\r        {%-
      for volume in volumes %}\r        - name: {{ volume.name }}\r          persistentVolumeClaim:\r
      \           claimName: {{ volume.name }}\r        {%- endfor %}\r        {%-
      for userDefVar in userDefVars %}\r        - name: {{ userDefVar.vol }}\r          configMap:\r
      \           name: {{ userDefVar.name }}\r        {%- endfor %}\r        - name:
      timezone\r          hostPath:\r            path: /etc/localtime\r        - name:
      fluentd-volume\r          configMap:\r            name: tomcat-fluentd\r        -
      name: fluentd-template\r          configMap:\r            name: accesslog-template"
  kind: ConfigMap
  metadata:
    creationTimestamp: 2019-03-18T04:52:50Z
    labels:
      a7n/system: "true"
      a7n/task: template
    name: template-tomcat-8-0-jre8
    namespace: accordion
    resourceVersion: "550114"
    selfLink: /api/v1/namespaces/accordion/configmaps/template-tomcat-8-0-jre8
    uid: aec9eab1-4939-11e9-9f92-005056b08841
- apiVersion: v1
  data:
    buildable: "true"
    image: 127.0.0.1:30001/tomcat9:jre8
    kind: Deployment
    limit.cpu: "0"
    limit.gpu: "0"
    limit.mem: 0Mi
    logo: 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
    modify.type: admin
    name: tomcat-9-0-jre8
    project: all
    request.cpu: "0"
    request.gpu: "0"
    request.mem: 0Mi
    routable: "true"
    scalable: "true"
    script: tomcat
    type: app
    yaml: "apiVersion: v1\rkind: List\ritems:\r- apiVersion: apps/v1beta1\r  kind:
      Deployment\r  metadata:\r    ### application and namespace name\r    name: {{
      appName }}\r    namespace: {{ projectName }}\r    ### labels\r    labels:\r
      \   {%- for label in labels %}\r      {{ label.key }}: {{ label.value }}\r    {%-
      endfor %}\r  spec:\r    ### replicas\r    replicas: {{ replicas }}\r    selector:\r
      \     matchLabels:\r        task: {{ appName }}\r    strategy:\r      type:
      {{ updateStrategy }}\r    minReadySeconds: 10\r    template:\r      metadata:\r
      \       labels:\r          task: {{ appName }}\r      spec:\r        ### node
      selector\r        nodeSelector:\r        {%- for selector in nodeSelectors %}\r
      \         {{ selector.key }}: {{ selector.value }}\r        {%- endfor %}\r
      \       imagePullSecrets:\r          - name: regsecret\r        containers:\r
      \       ##### war #####\r        {%- if sourceType != 'storage' %}\r        -
      name: war\r          image: {{ imageName }}\r          imagePullPolicy: {{ imagePullPolicy
      }}\r          resources:\r            requests:\r              cpu: {{ warRequestCPU
      }}\r              memory: {{ warRequestMEM }}\r            limits:\r              cpu:
      {{ warLimitCPU }}\r              memory: {{warLimitMEM }}\r          volumeMounts:\r
      \         - name: app-volume\r            mountPath: /deploy\r          - name:
      lib-volume\r            mountPath: /lib\r          - name: conf-volume\r            mountPath:
      /config\r        {%- endif %}\r        ##### fluentd #####\r        - name:
      fluentd\r          image: gcr.io/google-containers/fluentd-elasticsearch:v2.4.0\r
      \         imagePullPolicy: IfNotPresent\r          resources:\r            requests:\r
      \             cpu: {{ fluentdRequestCPU }}\r              memory: {{ fluentdRequestMEM
      }}\r            limits:\r              cpu: {{ fluentdLimitCPU }}\r              memory:
      {{ fluentdLimitMEM }}\r          env:\r          - name: POD_NAMESPACE\r            valueFrom:\r
      \             fieldRef:\r                fieldPath: metadata.namespace\r          volumeMounts:\r
      \         - name: logs-volume\r            mountPath: /var/log/tomcat\r          -
      name: fluentd-volume\r            mountPath: /etc/fluent\r          - name:
      fluentd-template\r            mountPath: /template\r          - name: timezone\r
      \           mountPath: /etc/localtime\r        ##### was #####\r        - name:
      tomcat\r          image: {{ wasImageName }}\r          imagePullPolicy: Always\r
      \         ### command and args\r          command: [{%- for command in commands
      %}\"{{ command }}\"{{ \",\" if not loop.last }}{%- endfor %}]\r          args:
      [{%- for argument in arguments %}\"{{ argument }}\"{{ \",\" if not loop.last
      }}{%- endfor %}]\r          ### resource quota\r          resources:\r            requests:\r
      \             cpu: {{ requestCPU }}\r              memory: {{ requestMEM }}\r
      \           limits:\r              cpu: {{ limitCPU }}\r              memory:
      {{ limitMEM }}\r          lifecycle:\r            preStop:\r              exec:\r
      \               command: [\"/usr/local/tomcat/bin/shutdown.sh\"]\r          ###
      ports\r          ports:\r          {%- if containerPorts|length == 0 %}\r          -
      name: http-port\r            containerPort: 8080\r            protocol: TCP\r
      \         {%- endif %}\r          {%- for port in containerPorts %}\r          -
      name : {{ port.name }}\r            containerPort: {{ port.targetPort }}\r            protocol:
      {{ port.protocol }}\r          {%- endfor %}\r          ### environment variables\r
      \         env:\r          - name: SCOUTER_OPTS\r            valueFrom:\r              configMapKeyRef:\r
      \               name: scouter-tomcat-config\r                key: scouter.opts\r
      \         - name: TOMCAT_OPTS\r            valueFrom:\r              configMapKeyRef:\r
      \               name: tomcat-config\r                key: java.opts\r          -
      name: POD_NAME\r            valueFrom:\r              fieldRef:\r                fieldPath:
      metadata.name\r          {%- if environments|length == 0 %}\r          - name:
      LOGTYPE\r            value: file\r          - name: SCOUTER_HOST\r            value:
      -Dnet_collector_ip=monitor-agent.{{ projectName }}\r          - name: HEAP_MEM\r
      \           value: -Xms512m -Xmx512m\r          - name: JAVA_OPTS\r            value:
      $(TOMCAT_OPTS) $(HEAP_MEM) $(SCOUTER_HOST) $(SCOUTER_OPTS)\r          {%- endif
      %}\r          {%- for env in environments %}\r          - name: {{ env.name
      }}\r            value: {{ env.value }}\r          {%- endfor %}\r          ###
      liveness probe\r          {%- if livenessType != 'NoneType' %}\r          livenessProbe:\r
      \           {%- if livenessType == 'ExecType' %}\r            exec:\r              command:\r
      \             {%- for command in livenessExecCommand %}\r              - {{
      command }}\r              {%- endfor %}\r            {%- elif livenessType ==
      'httpGetType' %}\r            httpGet:\r              scheme: {{ livenessHttpGetScheme
      }}\r              port: {{ livenessHttpGetPort }}\r              path: {{ livenessHttpGetPath
      }}\r              httpHeaders:\r              {%- for header in livenessHttpGetHeaders
      %}\r              - name: {{ header.name }}\r                value: {{ header.value
      }}\r              {%- endfor %}\r            {%- elif livenessType == 'tcpSocketType'
      %}\r            tcpSocket:\r              port: {{ livenessTcpSocketPort }}\r
      \           {%- endif %}\r            initialDelaySeconds: {{ livenessInitialDelaySeconds
      }}\r            timeoutSeconds : {{ livenessTimeoutSeconds }}\r            periodSeconds:
      {{ livenessPeriodSeconds }}\r            successThreshold : {{ livenessSuccessThreshold
      }}\r            failureThreshold : {{ livenessFailureThreshold }}\r          {%-
      endif %}\r          ### readness probe\r          {%- if readinessType != 'NoneType'
      %}\r          readinessProbe:\r            {%- if readinessType == 'ExecType'
      %}\r            exec:\r              command:\r              {%- for command
      in readinessExecCommand %}\r              - {{ command }}\r              {%-
      endfor %}\r            {%- elif readinessType == 'httpGetType' %}\r            httpGet:\r
      \             scheme: {{ readinessHttpGetScheme }}\r              port: {{ readinessHttpGetPort
      }}\r              path: {{ readinessHttpGetPath }}\r              httpHeaders:\r
      \             {%- for header in readinessHttpGetHeaders %}\r              -
      name: {{ header.name }}\r                value: {{ header.value }}\r              {%-
      endfor %}\r            {%- elif readinessType == 'tcpSocketType' %}\r            tcpSocket:\r
      \             port: {{ readinessTcpSocketPort }}\r            {%- endif %}\r
      \           initialDelaySeconds: {{ readinessInitialDelaySeconds }}\r            timeoutSeconds
      : {{ readinessTimeoutSeconds }}\r            periodSeconds: {{ readinessPeriodSeconds
      }}\r            successThreshold : {{ readinessSuccessThreshold }}\r            failureThreshold
      : {{ readinessFailureThreshold }}\r          {%- endif %}\r          ### volume
      mounts\r          volumeMounts:\r          - name: app-volume\r            mountPath:
      /usr/local/tomcat/webapps\r          - name: conf-volume\r            mountPath:
      /usr/local/tomcat/tmp\r          - name: lib-volume\r            mountPath:
      /usr/local/tomcat/lib/jdbc\r          - name: logs-volume\r            mountPath:
      /usr/local/tomcat/logs\r          - name: work-volume\r            mountPath:
      /usr/local/tomcat/work\r          - name: timezone\r            mountPath: /etc/localtime\r
      \         {%- for volume in volumes %}\r          - name: {{ volume.name }}\r
      \           mountPath: {{ volume.mount }}\r          {%- endfor %}\r          {%-
      for userDefVar in userDefVars %}\r          - name: {{ userDefVar.vol }}\r            mountPath:
      {{ userDefVar.mount }}\r            {%- if userDefVar.key != '' %}\r            subPath:
      {{ userDefVar.key }}\r            {%- endif %}\r          {%- endfor %}\r        ###
      volumes\r        volumes:\r      {%- if sourceType == 'storage' %}\r        -
      name: app-volume\r          hostPath:\r            path: {{ storageSource }}\r
      \           type: Directory\r        - name: conf-volume\r          {%- if storageConfig
      != '' %}\r          hostPath:\r            path: {{ storageConfig }}\r            type:
      Directory\r          {%- endif %}\r        - name: lib-volume\r          {%-
      if storageLib != '' %}\r          hostPath:\r            path: {{ storageLib
      }}\r            type: Directory\r          {%- endif %}\r      {%- else %}\r
      \       - name: app-volume\r        {%- if appVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ appVolume.name }}\r        {%- endif %}\r        -
      name: conf-volume\r        {%- if confVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ confVolume.name }}\r        {%- endif %}\r        -
      name: lib-volume\r        {%- if libVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ libVolume.name }}\r        {%- endif %}\r      {%-
      endif %}\r        - name: logs-volume\r        {%- if logsVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ logsVolume.name }}\r        {%- endif %}\r        -
      name: work-volume\r        {%- if workVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ workVolume.name }}\r        {%- endif %}\r        {%-
      for volume in volumes %}\r        - name: {{ volume.name }}\r          persistentVolumeClaim:\r
      \           claimName: {{ volume.name }}\r        {%- endfor %}\r        {%-
      for userDefVar in userDefVars %}\r        - name: {{ userDefVar.vol }}\r          configMap:\r
      \           name: {{ userDefVar.name }}\r        {%- endfor %}\r        - name:
      timezone\r          hostPath:\r            path: /etc/localtime\r        - name:
      fluentd-volume\r          configMap:\r            name: tomcat-fluentd\r        -
      name: fluentd-template\r          configMap:\r            name: accesslog-template"
  kind: ConfigMap
  metadata:
    creationTimestamp: 2019-03-18T04:52:50Z
    labels:
      a7n/system: "true"
      a7n/task: template
    name: template-tomcat-9-0-jre8
    namespace: accordion
    resourceVersion: "550115"
    selfLink: /api/v1/namespaces/accordion/configmaps/template-tomcat-9-0-jre8
    uid: aece597d-4939-11e9-9f92-005056b08841
- apiVersion: v1
  data:
    buildable: "true"
    image: 127.0.0.1:30001/wildfly:latest
    kind: Deployment
    limit.cpu: "0"
    limit.gpu: "0"
    limit.mem: 0Mi
    logo: 
    name: wildfy-12-0-latest
    project: all
    request.cpu: "0"
    request.gpu: "0"
    request.mem: 0Mi
    routable: "true"
    scalable: "true"
    script: wildfly
    type: app
    yaml: "apiVersion: v1\rkind: List\ritems:\r- apiVersion: apps/v1beta1\r  kind:
      Deployment\r  metadata:\r    ### application and namespace name\r    name: {{
      appName }}\r    namespace: {{ projectName }}\r    ### labels\r    labels:\r
      \   {%- for label in labels %}\r      {{ label.key }}: {{ label.value }}\r    {%-
      endfor %}\r  spec:\r    ### replicas\r    replicas: {{ replicas }}\r    selector:\r
      \     matchLabels:\r        task: {{ appName }}\r    strategy:\r      type:
      {{ updateStrategy }}\r    minReadySeconds: 10\r    template:\r      metadata:\r
      \       labels:\r          task: {{ appName }}\r      spec:\r        ### node
      selector\r        nodeSelector:\r        {%- for selector in nodeSelectors %}\r
      \          {{ selector.key }}: {{ selector.value }}\r        {%- endfor %}\r
      \       imagePullSecrets:\r          - name: regsecret\r        containers:\r
      \       ##### war #####\r        {%- if sourceType != 'storage' %}\r        -
      name: war\r          image: {{ imageName }}\r          imagePullPolicy: {{ imagePullPolicy
      }}\r          resources:\r            requests:\r              cpu: {{ warRequestCPU
      }}\r              memory: {{ warRequestMEM }}\r            limits:\r              cpu:
      {{ warLimitCPU }}\r              memory: {{warLimitMEM }}\r          volumeMounts:\r
      \         - name: app-volume\r            mountPath: /deploy\r          - name:
      lib-volume\r            mountPath: /lib\r          - name: conf-volume\r            mountPath:
      /config\r        {%- endif %}\r        ##### fluentd #####\r        - name:
      fluentd\r          image: gcr.io/google-containers/fluentd-elasticsearch:v2.4.0\r
      \         imagePullPolicy: IfNotPresent\r          resources:\r            requests:\r
      \             cpu: {{ fluentdRequestCPU }}\r              memory: {{ fluentdRequestMEM
      }}\r            limits:\r              cpu: {{ fluentdLimitCPU }}\r              memory:
      {{ fluentdLimitMEM }}\r          env:\r          - name: POD_NAMESPACE\r            valueFrom:\r
      \             fieldRef:\r                fieldPath: metadata.namespace\r          volumeMounts:\r
      \         - name: logs-volume\r            mountPath: /var/log/wildfly\r          -
      name: fluentd-volume\r            mountPath: /etc/fluent\r          - name:
      fluentd-template\r            mountPath: /template\r          - name: timezone\r
      \           mountPath: /etc/localtime\r        ##### was #####\r        - name:
      wildfly\r          image: {{ wasImageName }}\r          imagePullPolicy: Always\r
      \         ### command and args\r          command: [{%- for command in commands
      %}\"{{ command }}\"{{ \",\" if not loop.last }}{%- endfor %}]\r          args:
      [{%- for argument in arguments %}\"{{ argument }}\"{{ \",\" if not loop.last
      }}{%- endfor %}]\r          ### resource quota\r          resources:\r            requests:\r
      \             cpu: {{ requestCPU }}\r              memory: {{ requestMEM }}\r
      \           limits:\r              cpu: {{ limitCPU }}\r              memory:
      {{ limitMEM }}\r          ### ports\r          ports:\r          {%- if containerPorts|length
      == 0 %}\r          - name: http-port\r            containerPort: 8080\r            protocol:
      TCP\r          - name: admin-port\r            containerPort: 9990\r            protocol:
      TCP\r          {%- endif %}\r          {%- for port in containerPorts %}\r          -
      name : {{ port.name }}\r            containerPort: {{ port.targetPort }}\r            protocol:
      {{ port.protocol }}\r          {%- endfor %}\r          ### environment variables\r
      \         env:\r          - name: SCOUTER_OPTS\r            valueFrom:\r              configMapKeyRef:\r
      \               name: scouter-wildfly-config\r                key: scouter.opts\r
      \         - name: WILDFLY_OPTS\r            valueFrom:\r              configMapKeyRef:\r
      \               name: wildfly-config\r                key: java.opts\r          -
      name: POD_NAME\r            valueFrom:\r              fieldRef:\r                fieldPath:
      metadata.name\r          {%- if environments|length == 0 %}\r          - name:
      LOGTYPE\r            value: file\r          - name: SCOUTER_HOST\r            value:
      -Dnet_collector_ip=monitor-agent.{{ projectName }}\r          - name: HEAP_MEM\r
      \           value: -Xms512m -Xmx512m\r          - name: JAVA_OPTS\r            value:
      $(WILDFLY_OPTS) $(HEAP_MEM) $(SCOUTER_HOST) $(SCOUTER_OPTS)\r          {%- endif
      %}\r          {%- for env in environments %}\r          - name: {{ env.name
      }}\r            value: {{ env.value }}\r          {%- endfor %}\r          ###
      liveness probe\r          {%- if livenessType != 'NoneType' %}\r          livenessProbe:\r
      \           {%- if livenessType == 'ExecType' %}\r            exec:\r              command:\r
      \             {%- for command in livenessExecCommand %}\r              - {{
      command }}\r              {%- endfor %}\r            {%- elif livenessType ==
      'httpGetType' %}\r            httpGet:\r              scheme: {{ livenessHttpGetScheme
      }}\r              port: {{ livenessHttpGetPort }}\r              path: {{ livenessHttpGetPath
      }}\r              httpHeaders:\r              {%- for header in livenessHttpGetHeaders
      %}\r              - name: {{ header.name }}\r                value: {{ header.value
      }}\r              {%- endfor %}\r            {%- elif livenessType == 'tcpSocketType'
      %}\r            tcpSocket:\r              port: {{ livenessTcpSocketPort }}\r
      \           {%- endif %}\r            initialDelaySeconds: {{ livenessInitialDelaySeconds
      }}\r            timeoutSeconds : {{ livenessTimeoutSeconds }}\r            periodSeconds:
      {{ livenessPeriodSeconds }}\r            successThreshold : {{ livenessSuccessThreshold
      }}\r            failureThreshold : {{ livenessFailureThreshold }}\r          {%-
      endif %}\r          ### readness probe\r          {%- if readinessType != 'NoneType'
      %}\r          readinessProbe:\r            {%- if readinessType == 'ExecType'
      %}\r            exec:\r              command:\r              {%- for command
      in readinessExecCommand %}\r              - {{ command }}\r              {%-
      endfor %}\r            {%- elif readinessType == 'httpGetType' %}\r            httpGet:\r
      \             scheme: {{ readinessHttpGetScheme }}\r              port: {{ readinessHttpGetPort
      }}\r              path: {{ readinessHttpGetPath }}\r              httpHeaders:\r
      \             {%- for header in readinessHttpGetHeaders %}\r              -
      name: {{ header.name }}\r                value: {{ header.value }}\r              {%-
      endfor %}\r            {%- elif readinessType == 'tcpSocketType' %}\r            tcpSocket:\r
      \             port: {{ readinessTcpSocketPort }}\r            {%- endif %}\r
      \           initialDelaySeconds: {{ readinessInitialDelaySeconds }}\r            timeoutSeconds
      : {{ readinessTimeoutSeconds }}\r            periodSeconds: {{ readinessPeriodSeconds
      }}\r            successThreshold : {{ readinessSuccessThreshold }}\r            failureThreshold
      : {{ readinessFailureThreshold }}\r          {%- endif %}\r          ### volume
      mounts\r          volumeMounts:\r          - name: app-volume\r            mountPath:
      /opt/jboss/wildfly/standalone/deployments\r          - name: conf-volume\r            mountPath:
      /opt/jboss/wildfly/standalone/tmp/config\r          - name: lib-volume\r            mountPath:
      /opt/jboss/wildfly/standalone/tmp/lib\r          - name: logs-volume\r            mountPath:
      /opt/jboss/wildfly/standalone/log\r          - name: work-volume\r            mountPath:
      /opt/jboss/wildfly/standalone/tmp\r          - name: timezone\r            mountPath:
      /etc/localtime\r          {%- for volume in volumes %}\r          - name: {{
      volume.name }}\r            mountPath: {{ volume.mount }}\r          {%- endfor
      %}\r          {%- for userDefVar in userDefVars %}\r          - name: {{ userDefVar.vol
      }}\r            mountPath: {{ userDefVar.mount }}\r            {%- if userDefVar.key
      != '' %}\r            subPath: {{ userDefVar.key }}\r            {%- endif %}\r
      \         {%- endfor %}\r        ### volumes\r        volumes:\r      {%- if
      sourceType == 'storage' %}\r        - name: app-volume\r          hostPath:\r
      \           path: {{ storageSource }}\r            type: Directory\r        -
      name: conf-volume\r          {%- if storageConfig != '' %}\r          hostPath:\r
      \           path: {{ storageConfig }}\r            type: Directory\r          {%-
      endif %}\r        - name: lib-volume\r          {%- if storageLib != '' %}\r
      \         hostPath:\r            path: {{ storageLib }}\r            type: Directory\r
      \         {%- endif %}\r      {%- else %}\r        - name: app-volume\r        {%-
      if appVolume %}\r          persistentVolumeClaim:\r            claimName: {{
      appVolume.name }}\r        {%- endif %}\r        - name: conf-volume\r        {%-
      if confVolume %}\r          persistentVolumeClaim:\r            claimName: {{
      confVolume.name }}\r        {%- endif %}\r        - name: lib-volume\r        {%-
      if libVolume %}\r          persistentVolumeClaim:\r            claimName: {{
      libVolume.name }}\r        {%- endif %}\r      {%- endif %}\r        - name:
      logs-volume\r        {%- if logsVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ logsVolume.name }}\r        {%- endif %}\r        -
      name: work-volume\r        {%- if workVolume %}\r          persistentVolumeClaim:\r
      \           claimName: {{ workVolume.name }}\r        {%- endif %}\r        {%-
      for volume in volumes %}\r        - name: {{ volume.name }}\r          persistentVolumeClaim:\r
      \           claimName: {{ volume.name }}\r        {%- endfor %}\r        {%-
      for userDefVar in userDefVars %}\r        - name: {{ userDefVar.vol }}\r          configMap:\r
      \           name: {{ userDefVar.name }}\r        {%- endfor %}\r        - name:
      timezone\r          hostPath:\r            path: /etc/localtime\r        - name:
      fluentd-volume\r          configMap:\r            name: wildfly-fluentd\r        -
      name: fluentd-template\r          configMap:\r            name: accesslog-template"
  kind: ConfigMap
  metadata:
    creationTimestamp: 2019-03-18T04:52:50Z
    labels:
      a7n/system: "true"
      a7n/task: template
    name: template-wildfy-12-0-latest
    namespace: accordion
    resourceVersion: "550116"
    selfLink: /api/v1/namespaces/accordion/configmaps/template-wildfy-12-0-latest
    uid: aed23215-4939-11e9-9f92-005056b08841
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
