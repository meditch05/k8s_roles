---
- name: Install nfs-utils1
  apt: name=nfs-common state=latest
  when: 
    - install_mode == "online"

- name: Install nfs-utils2
  apt: name=nfs-kernel-server state=latest
  when:
    - install_mode == "online"

- name: Create the Token
  shell: "kubeadm token create"
  delegate_to: "{{ groups['master'][0] }}"
  register: create_token
  tags:
    - output

- name: Check the Token
  shell: "kubeadm token list | grep authentication | awk '{print $1}' | tail -1"
  delegate_to: "{{ groups['master'][0] }}"
  register: check_token
  tags:
    - output

- name: Join nodes with master
  shell: "kubeadm join --token {{ check_token.stdout }} {{ master_ip }}:{{ kube_apiserver_port }} --ignore-preflight-errors=all --discovery-token-unsafe-skip-ca-verification"
  when: inventory_hostname in groups['minions'] or inventory_hostname in groups['infra']
  register: kubeadm_join_command
  tags:
    - output

- name: Configure nfs
  shell: "echo -e '{{ accordion_nfs_path }} {{ hostvars[inventory_hostname].ansible_host }}(rw,sync,fsid=0,no_root_squash)' >> /etc/exports"
  delegate_to: "{{ groups['master'][0] }}"
  register: nfs_command

- name: Restart nfs server
  service: name=nfs-kernel-server state=restarted
  delegate_to: "{{ groups['master'][0] }}"
  ignore_errors: yes

#- name: uncordon node
#  shell: "kubectl uncordon {{ inventory_hostname }}"
#  delegate_to: "{{ groups['master'][0] }}"
#  register: uncordon_node
#  tags:
#    - output

#- name: print output of kubeadm_join_command
#  debug: msg="{{ kubeadm_join_command.stdout_lines }}"
#  tags:
#    - output
